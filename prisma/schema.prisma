// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  output          = "../node_modules/.prisma/client"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username      String     @default("NO_NAME")
  password      String?
  email         String     @unique
  emailVerified DateTime?  @map("email_verified") @db.Timestamp(6)
  image         String?
  role          String     @default("USER")
  bookmarks     Bookmark[]
  account       Account[]
  session       Session[]

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @updatedAt @map("updated_at")
  isDeleted Boolean  @default(false) @map("is_deleted")
  isBanned  Boolean  @default(false) @map("is_banned")

  @@map("user")
}

model Bookmark {
  id      String @id
  href    String
  size    Int
  title   String
  imgUrl  String
  bgColor String
  user    User   @relation(fields: [userId], references: [id])
  userId  String @map("user_id") @db.Uuid

  @@map("bookmark")
}

model Account {
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  accessToken       String? @map("access_token")
  refreshToken      String? @map("refresh_token")
  expiresAt         Int?    @map("expires_at")
  tokenType         String? @map("token_type")
  scope             String?
  idToken           String? @map("id_token")
  sessionState      String? @map("session_state")
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String  @db.Uuid

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([provider, providerAccountId])
  @@map("account")
}

model Session {
  sessionToken String   @id
  expires      DateTime @db.Timestamp(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String   @db.Uuid

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("session")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime @db.Timestamp(6)

  @@id([identifier, token])
  @@map("verification_token")
}
